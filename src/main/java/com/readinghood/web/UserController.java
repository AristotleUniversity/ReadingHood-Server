/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.readinghood.web;

import com.readinghood.model.User;
import com.readinghood.repository.UserRepository;
import java.util.ArrayList;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller
@RequestMapping(path="/users") // This means URL's start with /demo (after Application path)
public class UserController {
    @Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;
               // private RoleRepository roleRepository;
    
	@GetMapping(path="/add") // Map ONLY GET Requests
	public @ResponseBody String addNewUser (@RequestParam String username
			, @RequestParam String name, @RequestParam String surname, @RequestParam String email, @RequestParam String password,@RequestParam String roles) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		User n = new User();
		n.setUsername(username);
                                n.setName(name);
                                n.setSurname(surname);
                                n.setPassword(password);
		n.setEmail(email);
                
		userRepository.save(n);
		return "OK";
	}

	@GetMapping(path="/all")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}
        
                @GetMapping(path="/login")
	public @ResponseBody List<Object> login(@RequestParam String email, @RequestParam String password) {
		// This returns a JSON or XML with the users
                             
                                User  user = userRepository.findUserByEmailAndPassword(email, password);
                                List<Object> response = new ArrayList<>();
                                if(user != null){
                                    response.add("OK");
                                    response.add(user);
                                }
                                else {
                                    
                                    response.add("FAIL");
                                }
                                
                                return response;
	
	}
}